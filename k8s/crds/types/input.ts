// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace agent {
    export namespace v1alpha1 {
        /**
         * AgentSpec defines the desired state of the Agent
         */
        export interface AgentSpecArgs {
            /**
             * Config holds the Agent configuration. At most one of [`Config`, `ConfigRef`] can be specified.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * ConfigRef contains a reference to an existing Kubernetes Secret holding the Agent configuration. Agent settings must be specified as yaml, under a single "agent.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
             */
            configRef?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecConfigRefArgs>;
            /**
             * DaemonSet specifies the Agent should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`.
             */
            daemonSet?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecDaemonSetArgs>;
            /**
             * Deployment specifies the Agent should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`.
             */
            deployment?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecDeploymentArgs>;
            /**
             * ElasticsearchRefs is a reference to a list of Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single ES cluster is currently supported.
             */
            elasticsearchRefs?: pulumi.Input<pulumi.Input<inputs.agent.v1alpha1.AgentSpecElasticsearchRefsArgs>[]>;
            /**
             * FleetServerEnabled determines whether this Agent will launch Fleet Server. Don't set unless `mode` is set to `fleet`.
             */
            fleetServerEnabled?: pulumi.Input<boolean>;
            /**
             * FleetServerRef is a reference to Fleet Server that this Agent should connect to to obtain it's configuration. Don't set unless `mode` is set to `fleet`.
             */
            fleetServerRef?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecFleetServerRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for the Agent in Fleet mode with Fleet Server enabled.
             */
            http?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpArgs>;
            /**
             * Image is the Agent Docker image to deploy. Version has to match the Agent in the image.
             */
            image?: pulumi.Input<string>;
            /**
             * KibanaRef is a reference to Kibana where Fleet should be set up and this Agent should be enrolled. Don't set unless `mode` is set to `fleet`.
             */
            kibanaRef?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecKibanaRefArgs>;
            /**
             * Mode specifies the source of configuration for the Agent. The configuration can be specified locally through `config` or `configRef` (`standalone` mode), or come from Fleet during runtime (`fleet` mode). Defaults to `standalone` mode.
             */
            mode?: pulumi.Input<string>;
            /**
             * SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Agent. Secrets data can be then referenced in the Agent config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.agent.v1alpha1.AgentSpecSecureSettingsArgs>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to an Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of the Agent.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ConfigRef contains a reference to an existing Kubernetes Secret holding the Agent configuration. Agent settings must be specified as yaml, under a single "agent.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
         */
        export interface AgentSpecConfigRefArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * DaemonSet specifies the Agent should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`.
         */
        export interface AgentSpecDaemonSetArgs {
            /**
             * PodTemplateSpec describes the data a pod should have when created from a template
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
             */
            updateStrategy?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecDaemonSetUpdateStrategyArgs>;
        }

        /**
         * DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
         */
        export interface AgentSpecDaemonSetUpdateStrategyArgs {
            /**
             * Rolling update config params. Present only if type = "RollingUpdate". --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345
             */
            rollingUpdate?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecDaemonSetUpdateStrategyRollingUpdateArgs>;
            /**
             * Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if type = "RollingUpdate". --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345
         */
        export interface AgentSpecDaemonSetUpdateStrategyRollingUpdateArgs {
            /**
             * The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Deployment specifies the Agent should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`.
         */
        export interface AgentSpecDeploymentArgs {
            /**
             * PodTemplateSpec describes the data a pod should have when created from a template
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            replicas?: pulumi.Input<number>;
            /**
             * DeploymentStrategy describes how to replace existing pods with new ones.
             */
            strategy?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecDeploymentStrategyArgs>;
        }

        /**
         * DeploymentStrategy describes how to replace existing pods with new ones.
         */
        export interface AgentSpecDeploymentStrategyArgs {
            /**
             * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
             */
            rollingUpdate?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecDeploymentStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
         */
        export interface AgentSpecDeploymentStrategyRollingUpdateArgs {
            /**
             * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface AgentSpecElasticsearchRefsArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            outputName?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * FleetServerRef is a reference to Fleet Server that this Agent should connect to to obtain it's configuration. Don't set unless `mode` is set to `fleet`.
         */
        export interface AgentSpecFleetServerRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for the Agent in Fleet mode with Fleet Server enabled.
         */
        export interface AgentSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface AgentSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface AgentSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface AgentSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface AgentSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * agentSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for AgentSpecHttpServiceSpecPortsArgs
         */
        export function agentSpecHttpServiceSpecPortsArgsProvideDefaults(val: AgentSpecHttpServiceSpecPortsArgs): AgentSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface AgentSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface AgentSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface AgentSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface AgentSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface AgentSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.agent.v1alpha1.AgentSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface AgentSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * KibanaRef is a reference to Kibana where Fleet should be set up and this Agent should be enrolled. Don't set unless `mode` is set to `fleet`.
         */
        export interface AgentSpecKibanaRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface AgentSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.agent.v1alpha1.AgentSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface AgentSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * AgentStatus defines the observed state of the Agent
         */
        export interface AgentStatusArgs {
            availableNodes?: pulumi.Input<number>;
            /**
             * AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
             */
            elasticsearchAssociationsStatus?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            expectedNodes?: pulumi.Input<number>;
            /**
             * AssociationStatus is the status of an association resource.
             */
            fleetServerAssociationStatus?: pulumi.Input<string>;
            health?: pulumi.Input<string>;
            /**
             * AssociationStatus is the status of an association resource.
             */
            kibanaAssociationStatus?: pulumi.Input<string>;
            /**
             * ObservedGeneration is the most recent generation observed for this Elastic Agent. It corresponds to the metadata generation, which is updated on mutation by the API Server. If the generation observed in status diverges from the generation in metadata, the Elastic Agent controller has not yet processed the changes contained in the Elastic Agent specification.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }

    }
}

export namespace apm {
    export namespace v1 {
        /**
         * ApmServerSpec holds the specification of an APM Server.
         */
        export interface ApmServerSpecArgs {
            /**
             * Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of APM Server instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.apm.v1.ApmServerSpecElasticsearchRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for the APM Server resource.
             */
            http?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpArgs>;
            /**
             * Image is the APM Server Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
             */
            kibanaRef?: pulumi.Input<inputs.apm.v1.ApmServerSpecKibanaRefArgs>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecSecureSettingsArgs>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of the APM Server.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface ApmServerSpecElasticsearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for the APM Server resource.
         */
        export interface ApmServerSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ApmServerSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ApmServerSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ApmServerSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ApmServerSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * apmServerSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for ApmServerSpecHttpServiceSpecPortsArgs
         */
        export function apmServerSpecHttpServiceSpecPortsArgsProvideDefaults(val: ApmServerSpecHttpServiceSpecPortsArgs): ApmServerSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ApmServerSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ApmServerSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
         */
        export interface ApmServerSpecKibanaRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ApmServerSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.apm.v1.ApmServerSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ApmServerSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ApmServerStatus defines the observed state of ApmServer
         */
        export interface ApmServerStatusArgs {
            /**
             * AvailableNodes is the number of available replicas in the deployment.
             */
            availableNodes?: pulumi.Input<number>;
            /**
             * Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
             */
            elasticsearchAssociationStatus?: pulumi.Input<string>;
            /**
             * Health of the deployment.
             */
            health?: pulumi.Input<string>;
            /**
             * KibanaAssociationStatus is the status of any auto-linking to Kibana.
             */
            kibanaAssociationStatus?: pulumi.Input<string>;
            /**
             * SecretTokenSecretName is the name of the Secret that contains the secret token
             */
            secretTokenSecret?: pulumi.Input<string>;
            /**
             * Selector is the label selector used to find all pods.
             */
            selector?: pulumi.Input<string>;
            /**
             * ExternalService is the name of the service the agents should connect to.
             */
            service?: pulumi.Input<string>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }
    }

    export namespace v1beta1 {
        /**
         * ApmServerSpec holds the specification of an APM Server.
         */
        export interface ApmServerSpecArgs {
            /**
             * Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of APM Server instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecElasticsearchRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for the APM Server resource.
             */
            http?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpArgs>;
            /**
             * Image is the APM Server Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.apm.v1beta1.ApmServerSpecSecureSettingsArgs>[]>;
            /**
             * Version of the APM Server.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface ApmServerSpecElasticsearchRefArgs {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for the APM Server resource.
         */
        export interface ApmServerSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ApmServerSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ApmServerSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ApmServerSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ApmServerSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * apmServerSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for ApmServerSpecHttpServiceSpecPortsArgs
         */
        export function apmServerSpecHttpServiceSpecPortsArgsProvideDefaults(val: ApmServerSpecHttpServiceSpecPortsArgs): ApmServerSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ApmServerSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ApmServerSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.apm.v1beta1.ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ApmServerSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.apm.v1beta1.ApmServerSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ApmServerSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ApmServerStatus defines the observed state of ApmServer
         */
        export interface ApmServerStatusArgs {
            /**
             * Association is the status of any auto-linking to Elasticsearch clusters.
             */
            associationStatus?: pulumi.Input<string>;
            availableNodes?: pulumi.Input<number>;
            /**
             * ApmServerHealth expresses the status of the Apm Server instances.
             */
            health?: pulumi.Input<string>;
            /**
             * SecretTokenSecretName is the name of the Secret that contains the secret token
             */
            secretTokenSecret?: pulumi.Input<string>;
            /**
             * ExternalService is the name of the service the agents should connect to.
             */
            service?: pulumi.Input<string>;
        }
    }
}

export namespace beat {
    export namespace v1beta1 {
        /**
         * BeatSpec defines the desired state of a Beat.
         */
        export interface BeatSpecArgs {
            /**
             * Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
             */
            configRef?: pulumi.Input<inputs.beat.v1beta1.BeatSpecConfigRefArgs>;
            /**
             * DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
             */
            daemonSet?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDaemonSetArgs>;
            /**
             * Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
             */
            deployment?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDeploymentArgs>;
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.beat.v1beta1.BeatSpecElasticsearchRefArgs>;
            /**
             * Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
             */
            image?: pulumi.Input<string>;
            /**
             * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
             */
            kibanaRef?: pulumi.Input<inputs.beat.v1beta1.BeatSpecKibanaRefArgs>;
            /**
             * SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.beat.v1beta1.BeatSpecSecureSettingsArgs>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, and so on). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
             */
            type: pulumi.Input<string>;
            /**
             * Version of the Beat.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.
         */
        export interface BeatSpecConfigRefArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.
         */
        export interface BeatSpecDaemonSetArgs {
            /**
             * PodTemplateSpec describes the data a pod should have when created from a template
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
             */
            updateStrategy?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDaemonSetUpdateStrategyArgs>;
        }

        /**
         * DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
         */
        export interface BeatSpecDaemonSetUpdateStrategyArgs {
            /**
             * Rolling update config params. Present only if type = "RollingUpdate". --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345
             */
            rollingUpdate?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDaemonSetUpdateStrategyRollingUpdateArgs>;
            /**
             * Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if type = "RollingUpdate". --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345
         */
        export interface BeatSpecDaemonSetUpdateStrategyRollingUpdateArgs {
            /**
             * The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.
         */
        export interface BeatSpecDeploymentArgs {
            /**
             * PodTemplateSpec describes the data a pod should have when created from a template
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            replicas?: pulumi.Input<number>;
            /**
             * DeploymentStrategy describes how to replace existing pods with new ones.
             */
            strategy?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDeploymentStrategyArgs>;
        }

        /**
         * DeploymentStrategy describes how to replace existing pods with new ones.
         */
        export interface BeatSpecDeploymentStrategyArgs {
            /**
             * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
             */
            rollingUpdate?: pulumi.Input<inputs.beat.v1beta1.BeatSpecDeploymentStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
         */
        export interface BeatSpecDeploymentStrategyRollingUpdateArgs {
            /**
             * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface BeatSpecElasticsearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.
         */
        export interface BeatSpecKibanaRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface BeatSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.beat.v1beta1.BeatSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface BeatSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * BeatStatus defines the observed state of a Beat.
         */
        export interface BeatStatusArgs {
            availableNodes?: pulumi.Input<number>;
            /**
             * AssociationStatus is the status of an association resource.
             */
            elasticsearchAssociationStatus?: pulumi.Input<string>;
            expectedNodes?: pulumi.Input<number>;
            health?: pulumi.Input<string>;
            /**
             * AssociationStatus is the status of an association resource.
             */
            kibanaAssociationStatus?: pulumi.Input<string>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }
    }
}

export namespace elasticsearch {
    export namespace v1 {
        /**
         * ElasticsearchSpec holds the specification of an Elasticsearch cluster.
         */
        export interface ElasticsearchSpecArgs {
            /**
             * Auth contains user authentication and authorization security settings for Elasticsearch.
             */
            auth?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecAuthArgs>;
            /**
             * HTTP holds HTTP layer settings for Elasticsearch.
             */
            http?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpArgs>;
            /**
             * Image is the Elasticsearch Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster. See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html. Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different Elasticsearch monitoring clusters running in the same Kubernetes cluster.
             */
            monitoring?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecMonitoringArgs>;
            /**
             * NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
             */
            nodeSets: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsArgs>[]>;
            /**
             * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
             */
            podDisruptionBudget?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetArgs>;
            /**
             * RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
             */
            remoteClusters?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecRemoteClustersArgs>[]>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecSecureSettingsArgs>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Transport holds transport layer settings for Elasticsearch.
             */
            transport?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportArgs>;
            /**
             * UpdateStrategy specifies how updates to the cluster should be performed.
             */
            updateStrategy?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecUpdateStrategyArgs>;
            /**
             * Version of Elasticsearch.
             */
            version: pulumi.Input<string>;
            /**
             * VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets. Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
             */
            volumeClaimDeletePolicy?: pulumi.Input<string>;
        }

        /**
         * Auth contains user authentication and authorization security settings for Elasticsearch.
         */
        export interface ElasticsearchSpecAuthArgs {
            /**
             * FileRealm to propagate to the Elasticsearch cluster.
             */
            fileRealm?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecAuthFileRealmArgs>[]>;
            /**
             * Roles to propagate to the Elasticsearch cluster.
             */
            roles?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecAuthRolesArgs>[]>;
        }

        /**
         * FileRealmSource references users to create in the Elasticsearch cluster.
         */
        export interface ElasticsearchSpecAuthFileRealmArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * RoleSource references roles to create in the Elasticsearch cluster.
         */
        export interface ElasticsearchSpecAuthRolesArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds HTTP layer settings for Elasticsearch.
         */
        export interface ElasticsearchSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ElasticsearchSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ElasticsearchSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ElasticsearchSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ElasticsearchSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * elasticsearchSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for ElasticsearchSpecHttpServiceSpecPortsArgs
         */
        export function elasticsearchSpecHttpServiceSpecPortsArgsProvideDefaults(val: ElasticsearchSpecHttpServiceSpecPortsArgs): ElasticsearchSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ElasticsearchSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ElasticsearchSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ElasticsearchSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster. See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html. Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different Elasticsearch monitoring clusters running in the same Kubernetes cluster.
         */
        export interface ElasticsearchSpecMonitoringArgs {
            /**
             * Logs holds references to Elasticsearch clusters which receive log data from this Elasticsearch cluster.
             */
            logs?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecMonitoringLogsArgs>;
            /**
             * Metrics holds references to Elasticsearch clusters which receive monitoring data from this Elasticsearch cluster.
             */
            metrics?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecMonitoringMetricsArgs>;
        }

        /**
         * Logs holds references to Elasticsearch clusters which receive log data from this Elasticsearch cluster.
         */
        export interface ElasticsearchSpecMonitoringLogsArgs {
            /**
             * ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
             */
            elasticsearchRefs?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs>[]>;
        }

        /**
         * ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator or a Secret describing an external Elastic resource not managed by the operator.
         */
        export interface ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * Metrics holds references to Elasticsearch clusters which receive monitoring data from this Elasticsearch cluster.
         */
        export interface ElasticsearchSpecMonitoringMetricsArgs {
            /**
             * ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
             */
            elasticsearchRefs?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs>[]>;
        }

        /**
         * ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator or a Secret describing an external Elastic resource not managed by the operator.
         */
        export interface ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
         */
        export interface ElasticsearchSpecNodeSetsArgs {
            /**
             * Config holds the Elasticsearch configuration.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of Elasticsearch nodes to deploy. If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
             */
            count?: pulumi.Input<number>;
            /**
             * Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
             */
            name: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.
             */
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs>[]>;
        }

        /**
         * PersistentVolumeClaim is a user's request for and claim to a persistent volume
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs>;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs>;
            /**
             * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs>;
            /**
             * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs>;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusArgs {
            /**
             * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Represents the actual resources of the underlying volume.
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditionsArgs>[]>;
            /**
             * Phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: pulumi.Input<string>;
            /**
             * ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditionsArgs {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: pulumi.Input<string>;
        }

        /**
         * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
         */
        export interface ElasticsearchSpecPodDisruptionBudgetArgs {
            /**
             * ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetMetadataArgs>;
            /**
             * Spec is the specification of the PDB.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the PDB.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecArgs {
            /**
             * An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
             */
            maxUnavailable?: pulumi.Input<number | string>;
            /**
             * An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
             */
            minAvailable?: pulumi.Input<number | string>;
            /**
             * Label query over pods whose evictions are managed by the disruption budget. A null selector selects no pods. An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods. In policy/v1, an empty selector will select all pods in the namespace.
             */
            selector?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs>;
        }

        /**
         * Label query over pods whose evictions are managed by the disruption budget. A null selector selects no pods. An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods. In policy/v1, an empty selector will select all pods in the namespace.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RemoteCluster declares a remote Elasticsearch cluster connection.
         */
        export interface ElasticsearchSpecRemoteClustersArgs {
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecRemoteClustersElasticsearchRefArgs>;
            /**
             * Name is the name of the remote cluster as it is set in the Elasticsearch settings. The name is expected to be unique for each remote clusters.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
         */
        export interface ElasticsearchSpecRemoteClustersElasticsearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ElasticsearchSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ElasticsearchSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * Transport holds transport layer settings for Elasticsearch.
         */
        export interface ElasticsearchSpecTransportArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceArgs>;
            /**
             * TLS defines options for configuring TLS on the transport layer.
             */
            tls?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ElasticsearchSpecTransportServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ElasticsearchSpecTransportServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ElasticsearchSpecTransportServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ElasticsearchSpecTransportServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * elasticsearchSpecTransportServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for ElasticsearchSpecTransportServiceSpecPortsArgs
         */
        export function elasticsearchSpecTransportServiceSpecPortsArgsProvideDefaults(val: ElasticsearchSpecTransportServiceSpecPortsArgs): ElasticsearchSpecTransportServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS on the transport layer.
         */
        export interface ElasticsearchSpecTransportTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the CA certificate and private key for generating node certificates. The referenced secret should contain the following: 
             *  - `ca.crt`: The CA certificate in PEM format. - `ca.key`: The private key for the CA certificate in PEM format.
             */
            certificate?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportTlsCertificateArgs>;
            /**
             * OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name, and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name extension of each Elasticsearch node's transport TLS certificate. Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
             */
            otherNameSuffix?: pulumi.Input<string>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecTransportTlsSubjectAltNamesArgs>[]>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the CA certificate and private key for generating node certificates. The referenced secret should contain the following: 
         *  - `ca.crt`: The CA certificate in PEM format. - `ca.key`: The private key for the CA certificate in PEM format.
         */
        export interface ElasticsearchSpecTransportTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ElasticsearchSpecTransportTlsSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * UpdateStrategy specifies how updates to the cluster should be performed.
         */
        export interface ElasticsearchSpecUpdateStrategyArgs {
            /**
             * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
             */
            changeBudget?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchSpecUpdateStrategyChangeBudgetArgs>;
        }

        /**
         * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
         */
        export interface ElasticsearchSpecUpdateStrategyChangeBudgetArgs {
            /**
             * MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
             */
            maxSurge?: pulumi.Input<number>;
            /**
             * MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
             */
            maxUnavailable?: pulumi.Input<number>;
        }

        /**
         * ElasticsearchStatus represents the observed state of Elasticsearch.
         */
        export interface ElasticsearchStatusArgs {
            /**
             * AvailableNodes is the number of available instances.
             */
            availableNodes?: pulumi.Input<number>;
            /**
             * Conditions holds the current service state of an Elasticsearch cluster. **This API is in technical preview and may be changed or removed in a future release.**
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusConditionsArgs>[]>;
            /**
             * ElasticsearchHealth is the health of the cluster as returned by the health API.
             */
            health?: pulumi.Input<string>;
            /**
             * InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster. **This API is in technical preview and may be changed or removed in a future release.**
             */
            inProgressOperations?: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusInProgressOperationsArgs>;
            /**
             * AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
             */
            monitoringAssociationStatus?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ObservedGeneration is the most recent generation observed for this Elasticsearch cluster. It corresponds to the metadata generation, which is updated on mutation by the API Server. If the generation observed in status diverges from the generation in metadata, the Elasticsearch controller has not yet processed the changes contained in the Elasticsearch specification.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
             */
            phase?: pulumi.Input<string>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Condition represents Elasticsearch resource's condition. **This API is in technical preview and may be changed or removed in a future release.**
         */
        export interface ElasticsearchStatusConditionsArgs {
            lastTransitionTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * ConditionType defines the condition of an Elasticsearch resource.
             */
            type: pulumi.Input<string>;
        }

        /**
         * InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster. **This API is in technical preview and may be changed or removed in a future release.**
         */
        export interface ElasticsearchStatusInProgressOperationsArgs {
            /**
             * DownscaleOperation provides details about in progress downscale operations. **This API is in technical preview and may be changed or removed in a future release.**
             */
            downscale: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusInProgressOperationsDownscaleArgs>;
            /**
             * UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster. **This API is in technical preview and may be changed or removed in a future release.**
             */
            upgrade: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusInProgressOperationsUpgradeArgs>;
            /**
             * UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster. **This API is in technical preview and may be changed or removed in a future release.**
             */
            upscale: pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusInProgressOperationsUpscaleArgs>;
        }

        /**
         * DownscaleOperation provides details about in progress downscale operations. **This API is in technical preview and may be changed or removed in a future release.**
         */
        export interface ElasticsearchStatusInProgressOperationsDownscaleArgs {
            lastUpdatedTime?: pulumi.Input<string>;
            /**
             * Nodes which are scheduled to be removed from the cluster.
             */
            nodes?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusInProgressOperationsDownscaleNodesArgs>[]>;
            /**
             * Stalled represents a state where no progress can be made. It is only available for clusters managed with the Elasticsearch shutdown API.
             */
            stalled?: pulumi.Input<boolean>;
        }

        /**
         * DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster. **This API is in technical preview and may be changed or removed in a future release.**
         */
        export interface ElasticsearchStatusInProgressOperationsDownscaleNodesArgs {
            /**
             * Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the Elasticsearch shutdown API.
             */
            explanation?: pulumi.Input<string>;
            /**
             * Name of the Elasticsearch node that should be removed.
             */
            name: pulumi.Input<string>;
            /**
             * Shutdown status as returned by the Elasticsearch shutdown API. If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining shards on the nodes, as observed by the operator.
             */
            shutdownStatus: pulumi.Input<string>;
        }

        /**
         * UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster. **This API is in technical preview and may be changed or removed in a future release.**
         */
        export interface ElasticsearchStatusInProgressOperationsUpgradeArgs {
            lastUpdatedTime?: pulumi.Input<string>;
            /**
             * Nodes that must be restarted for upgrade.
             */
            nodes?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusInProgressOperationsUpgradeNodesArgs>[]>;
        }

        /**
         * UpgradedNode provides details about the status of nodes which are expected to be updated. **This API is in technical preview and may be changed or removed in a future release.**
         */
        export interface ElasticsearchStatusInProgressOperationsUpgradeNodesArgs {
            /**
             * Optional message to explain why a node may not be immediately restarted for upgrade.
             */
            message?: pulumi.Input<string>;
            /**
             * Name of the Elasticsearch node that should be upgraded.
             */
            name: pulumi.Input<string>;
            /**
             * Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
             */
            predicate?: pulumi.Input<string>;
            /**
             * Status states if the node is either in the process of being deleted for an upgrade, or blocked by a predicate or another condition stated in the message field.
             */
            status: pulumi.Input<string>;
        }

        /**
         * UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster. **This API is in technical preview and may be changed or removed in a future release.**
         */
        export interface ElasticsearchStatusInProgressOperationsUpscaleArgs {
            lastUpdatedTime?: pulumi.Input<string>;
            /**
             * Nodes expected to be added by the operator.
             */
            nodes?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1.ElasticsearchStatusInProgressOperationsUpscaleNodesArgs>[]>;
        }

        export interface ElasticsearchStatusInProgressOperationsUpscaleNodesArgs {
            /**
             * Optional message to explain why a node may not be immediately added.
             */
            message?: pulumi.Input<string>;
            /**
             * Name of the Elasticsearch node that should be added to the cluster.
             */
            name: pulumi.Input<string>;
            /**
             * NewNodeStatus states if a new node is being created, or if the upscale is delayed.
             */
            status: pulumi.Input<string>;
        }

    }

    export namespace v1beta1 {
        /**
         * ElasticsearchSpec holds the specification of an Elasticsearch cluster.
         */
        export interface ElasticsearchSpecArgs {
            /**
             * HTTP holds HTTP layer settings for Elasticsearch.
             */
            http?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpArgs>;
            /**
             * Image is the Elasticsearch Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
             */
            nodeSets: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsArgs>[]>;
            /**
             * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
             */
            podDisruptionBudget?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecPodDisruptionBudgetArgs>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecSecureSettingsArgs>[]>;
            /**
             * UpdateStrategy specifies how updates to the cluster should be performed.
             */
            updateStrategy?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecUpdateStrategyArgs>;
            /**
             * Version of Elasticsearch.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * HTTP holds HTTP layer settings for Elasticsearch.
         */
        export interface ElasticsearchSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ElasticsearchSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ElasticsearchSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ElasticsearchSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ElasticsearchSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * elasticsearchSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for ElasticsearchSpecHttpServiceSpecPortsArgs
         */
        export function elasticsearchSpecHttpServiceSpecPortsArgsProvideDefaults(val: ElasticsearchSpecHttpServiceSpecPortsArgs): ElasticsearchSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ElasticsearchSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ElasticsearchSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ElasticsearchSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
         */
        export interface ElasticsearchSpecNodeSetsArgs {
            /**
             * Config holds the Elasticsearch configuration.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of Elasticsearch nodes to deploy.
             */
            count: pulumi.Input<number>;
            /**
             * Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
             */
            name: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.
             */
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs>[]>;
        }

        /**
         * PersistentVolumeClaim is a user's request for and claim to a persistent volume
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs>;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs>;
            /**
             * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs>;
            /**
             * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs>;
            /**
             * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusArgs {
            /**
             * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Represents the actual resources of the underlying volume.
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditionsArgs>[]>;
            /**
             * Phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: pulumi.Input<string>;
            /**
             * ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface ElasticsearchSpecNodeSetsVolumeClaimTemplatesStatusConditionsArgs {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: pulumi.Input<string>;
        }

        /**
         * PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster. The default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
         */
        export interface ElasticsearchSpecPodDisruptionBudgetArgs {
            /**
             * ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecPodDisruptionBudgetMetadataArgs>;
            /**
             * Spec is the specification of the PDB.
             */
            spec?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecPodDisruptionBudgetSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the PDB. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the PDB.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecArgs {
            /**
             * An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
             */
            maxUnavailable?: pulumi.Input<number | string>;
            /**
             * An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
             */
            minAvailable?: pulumi.Input<number | string>;
            /**
             * Label query over pods whose evictions are managed by the disruption budget. A null selector selects no pods. An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods. In policy/v1, an empty selector will select all pods in the namespace.
             */
            selector?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs>;
        }

        /**
         * Label query over pods whose evictions are managed by the disruption budget. A null selector selects no pods. An empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods. In policy/v1, an empty selector will select all pods in the namespace.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ElasticsearchSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ElasticsearchSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * UpdateStrategy specifies how updates to the cluster should be performed.
         */
        export interface ElasticsearchSpecUpdateStrategyArgs {
            /**
             * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
             */
            changeBudget?: pulumi.Input<inputs.elasticsearch.v1beta1.ElasticsearchSpecUpdateStrategyChangeBudgetArgs>;
        }

        /**
         * ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
         */
        export interface ElasticsearchSpecUpdateStrategyChangeBudgetArgs {
            /**
             * MaxSurge is the maximum number of new pods that can be created exceeding the original number of pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.
             */
            maxSurge?: pulumi.Input<number>;
            /**
             * MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.
             */
            maxUnavailable?: pulumi.Input<number>;
        }

        /**
         * ElasticsearchStatus defines the observed state of Elasticsearch
         */
        export interface ElasticsearchStatusArgs {
            availableNodes?: pulumi.Input<number>;
            /**
             * ElasticsearchHealth is the health of the cluster as returned by the health API.
             */
            health?: pulumi.Input<string>;
            /**
             * ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
             */
            phase?: pulumi.Input<string>;
        }
    }
}

export namespace enterprisesearch {
    export namespace v1 {
        /**
         * EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
         */
        export interface EnterpriseSearchSpecArgs {
            /**
             * Config holds the Enterprise Search configuration.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
             */
            configRef?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecConfigRefArgs>;
            /**
             * Count of Enterprise Search instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecElasticsearchRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for Enterprise Search resource.
             */
            http?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpArgs>;
            /**
             * Image is the Enterprise Search Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of Enterprise Search.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
         */
        export interface EnterpriseSearchSpecConfigRefArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface EnterpriseSearchSpecElasticsearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for Enterprise Search resource.
         */
        export interface EnterpriseSearchSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface EnterpriseSearchSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface EnterpriseSearchSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * enterpriseSearchSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for EnterpriseSearchSpecHttpServiceSpecPortsArgs
         */
        export function enterpriseSearchSpecHttpServiceSpecPortsArgsProvideDefaults(val: EnterpriseSearchSpecHttpServiceSpecPortsArgs): EnterpriseSearchSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface EnterpriseSearchSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface EnterpriseSearchSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.enterprisesearch.v1.EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * EnterpriseSearchStatus defines the observed state of EnterpriseSearch
         */
        export interface EnterpriseSearchStatusArgs {
            /**
             * Association is the status of any auto-linking to Elasticsearch clusters.
             */
            associationStatus?: pulumi.Input<string>;
            /**
             * AvailableNodes is the number of available replicas in the deployment.
             */
            availableNodes?: pulumi.Input<number>;
            /**
             * Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
             */
            count?: pulumi.Input<number>;
            /**
             * Health of the deployment.
             */
            health?: pulumi.Input<string>;
            /**
             * Selector is the label selector used to find all pods.
             */
            selector?: pulumi.Input<string>;
            /**
             * ExternalService is the name of the service associated to the Enterprise Search Pods.
             */
            service?: pulumi.Input<string>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }
    }

    export namespace v1beta1 {
        /**
         * EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
         */
        export interface EnterpriseSearchSpecArgs {
            /**
             * Config holds the Enterprise Search configuration.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
             */
            configRef?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecConfigRefArgs>;
            /**
             * Count of Enterprise Search instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecElasticsearchRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for Enterprise Search resource.
             */
            http?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpArgs>;
            /**
             * Image is the Enterprise Search Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Enterprise Search pods.
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of Enterprise Search.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration. Configuration settings are merged and have precedence over settings specified in `config`.
         */
        export interface EnterpriseSearchSpecConfigRefArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface EnterpriseSearchSpecElasticsearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for Enterprise Search resource.
         */
        export interface EnterpriseSearchSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface EnterpriseSearchSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface EnterpriseSearchSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * enterpriseSearchSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for EnterpriseSearchSpecHttpServiceSpecPortsArgs
         */
        export function enterpriseSearchSpecHttpServiceSpecPortsArgsProvideDefaults(val: EnterpriseSearchSpecHttpServiceSpecPortsArgs): EnterpriseSearchSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface EnterpriseSearchSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface EnterpriseSearchSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.enterprisesearch.v1beta1.EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * EnterpriseSearchStatus defines the observed state of EnterpriseSearch
         */
        export interface EnterpriseSearchStatusArgs {
            /**
             * Association is the status of any auto-linking to Elasticsearch clusters.
             */
            associationStatus?: pulumi.Input<string>;
            /**
             * AvailableNodes is the number of available replicas in the deployment.
             */
            availableNodes?: pulumi.Input<number>;
            /**
             * Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
             */
            count?: pulumi.Input<number>;
            /**
             * Health of the deployment.
             */
            health?: pulumi.Input<string>;
            /**
             * Selector is the label selector used to find all pods.
             */
            selector?: pulumi.Input<string>;
            /**
             * ExternalService is the name of the service associated to the Enterprise Search Pods.
             */
            service?: pulumi.Input<string>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }
    }
}

export namespace kibana {
    export namespace v1 {
        /**
         * KibanaSpec holds the specification of a Kibana instance.
         */
        export interface KibanaSpecArgs {
            /**
             * Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of Kibana instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.kibana.v1.KibanaSpecElasticsearchRefArgs>;
            /**
             * EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster. Kibana provides the default Enterprise Search UI starting version 7.14.
             */
            enterpriseSearchRef?: pulumi.Input<inputs.kibana.v1.KibanaSpecEnterpriseSearchRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for Kibana.
             */
            http?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpArgs>;
            /**
             * Image is the Kibana Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * Monitoring enables you to collect and ship log and monitoring data of this Kibana. See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html. Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different Elasticsearch monitoring clusters running in the same Kubernetes cluster.
             */
            monitoring?: pulumi.Input<inputs.kibana.v1.KibanaSpecMonitoringArgs>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecSecureSettingsArgs>[]>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of Kibana.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface KibanaSpecElasticsearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster. Kibana provides the default Enterprise Search UI starting version 7.14.
         */
        export interface KibanaSpecEnterpriseSearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for Kibana.
         */
        export interface KibanaSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface KibanaSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface KibanaSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface KibanaSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface KibanaSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * kibanaSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for KibanaSpecHttpServiceSpecPortsArgs
         */
        export function kibanaSpecHttpServiceSpecPortsArgsProvideDefaults(val: KibanaSpecHttpServiceSpecPortsArgs): KibanaSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface KibanaSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface KibanaSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface KibanaSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface KibanaSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * Monitoring enables you to collect and ship log and monitoring data of this Kibana. See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html. Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different Elasticsearch monitoring clusters running in the same Kubernetes cluster.
         */
        export interface KibanaSpecMonitoringArgs {
            /**
             * Logs holds references to Elasticsearch clusters which will receive log data from this Kibana.
             */
            logs?: pulumi.Input<inputs.kibana.v1.KibanaSpecMonitoringLogsArgs>;
            /**
             * Metrics holds references to Elasticsearch clusters which will receive monitoring data from this Kibana.
             */
            metrics?: pulumi.Input<inputs.kibana.v1.KibanaSpecMonitoringMetricsArgs>;
        }

        /**
         * Logs holds references to Elasticsearch clusters which will receive log data from this Kibana.
         */
        export interface KibanaSpecMonitoringLogsArgs {
            /**
             * ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
             */
            elasticsearchRefs?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecMonitoringLogsElasticsearchRefsArgs>[]>;
        }

        /**
         * ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator or a Secret describing an external Elastic resource not managed by the operator.
         */
        export interface KibanaSpecMonitoringLogsElasticsearchRefsArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * Metrics holds references to Elasticsearch clusters which will receive monitoring data from this Kibana.
         */
        export interface KibanaSpecMonitoringMetricsArgs {
            /**
             * ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster. Due to existing limitations, only a single Elasticsearch cluster is currently supported.
             */
            elasticsearchRefs?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecMonitoringMetricsElasticsearchRefsArgs>[]>;
        }

        /**
         * ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator or a Secret describing an external Elastic resource not managed by the operator.
         */
        export interface KibanaSpecMonitoringMetricsElasticsearchRefsArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface KibanaSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.kibana.v1.KibanaSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface KibanaSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * KibanaStatus defines the observed state of Kibana
         */
        export interface KibanaStatusArgs {
            /**
             * AssociationStatus is the status of any auto-linking to Elasticsearch clusters. This field is deprecated and will be removed in a future release. Use ElasticsearchAssociationStatus instead.
             */
            associationStatus?: pulumi.Input<string>;
            /**
             * AvailableNodes is the number of available replicas in the deployment.
             */
            availableNodes?: pulumi.Input<number>;
            /**
             * Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
             */
            elasticsearchAssociationStatus?: pulumi.Input<string>;
            /**
             * EnterpriseSearchAssociationStatus is the status of any auto-linking to Enterprise Search.
             */
            enterpriseSearchAssociationStatus?: pulumi.Input<string>;
            /**
             * Health of the deployment.
             */
            health?: pulumi.Input<string>;
            /**
             * MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
             */
            monitoringAssociationStatus?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ObservedGeneration is the most recent generation observed for this Kibana instance. It corresponds to the metadata generation, which is updated on mutation by the API Server. If the generation observed in status diverges from the generation in metadata, the Kibana controller has not yet processed the changes contained in the Kibana specification.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Selector is the label selector used to find all pods.
             */
            selector?: pulumi.Input<string>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }

    }

    export namespace v1beta1 {
        /**
         * KibanaSpec holds the specification of a Kibana instance.
         */
        export interface KibanaSpecArgs {
            /**
             * Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * Count of Kibana instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecElasticsearchRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for Kibana.
             */
            http?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpArgs>;
            /**
             * Image is the Kibana Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
             */
            secureSettings?: pulumi.Input<pulumi.Input<inputs.kibana.v1beta1.KibanaSpecSecureSettingsArgs>[]>;
            /**
             * Version of Kibana.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface KibanaSpecElasticsearchRefArgs {
            /**
             * Name of the Kubernetes object.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for Kibana.
         */
        export interface KibanaSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface KibanaSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface KibanaSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface KibanaSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface KibanaSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * kibanaSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for KibanaSpecHttpServiceSpecPortsArgs
         */
        export function kibanaSpecHttpServiceSpecPortsArgsProvideDefaults(val: KibanaSpecHttpServiceSpecPortsArgs): KibanaSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface KibanaSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface KibanaSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface KibanaSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface KibanaSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface KibanaSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.kibana.v1beta1.KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface KibanaSpecSecureSettingsArgs {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: pulumi.Input<pulumi.Input<inputs.kibana.v1beta1.KibanaSpecSecureSettingsEntriesArgs>[]>;
            /**
             * SecretName is the name of the secret.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface KibanaSpecSecureSettingsEntriesArgs {
            /**
             * Key is the key contained in the secret.
             */
            key: pulumi.Input<string>;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * KibanaStatus defines the observed state of Kibana
         */
        export interface KibanaStatusArgs {
            /**
             * AssociationStatus is the status of an association resource.
             */
            associationStatus?: pulumi.Input<string>;
            availableNodes?: pulumi.Input<number>;
            /**
             * KibanaHealth expresses the status of the Kibana instances.
             */
            health?: pulumi.Input<string>;
        }
    }
}

export namespace maps {
    export namespace v1alpha1 {
        /**
         * MapsSpec holds the specification of an Elastic Maps Server instance.
         */
        export interface ElasticMapsServerSpecArgs {
            /**
             * Config holds the ElasticMapsServer configuration. See: https://www.elastic.co/guide/en/kibana/current/maps-connect-to-ems.html#elastic-maps-server-configuration
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration. Configuration settings are merged and have precedence over settings specified in `config`.
             */
            configRef?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecConfigRefArgs>;
            /**
             * Count of Elastic Maps Server instances to deploy.
             */
            count?: pulumi.Input<number>;
            /**
             * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecElasticsearchRefArgs>;
            /**
             * HTTP holds the HTTP layer configuration for Elastic Maps Server.
             */
            http?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpArgs>;
            /**
             * Image is the Elastic Maps Server Docker image to deploy.
             */
            image?: pulumi.Input<string>;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Elastic Maps Server pods
             */
            podTemplate?: pulumi.Input<{[key: string]: any}>;
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * Version of Elastic Maps Server.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration. Configuration settings are merged and have precedence over settings specified in `config`.
         */
        export interface ElasticMapsServerSpecConfigRefArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface ElasticMapsServerSpecElasticsearchRefArgs {
            /**
             * Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
             */
            secretName?: pulumi.Input<string>;
            /**
             * ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
             */
            serviceName?: pulumi.Input<string>;
        }

        /**
         * HTTP holds the HTTP layer configuration for Elastic Maps Server.
         */
        export interface ElasticMapsServerSpecHttpArgs {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpServiceArgs>;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpTlsArgs>;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ElasticMapsServerSpecHttpServiceArgs {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpServiceMetadataArgs>;
            /**
             * Spec is the specification of the service.
             */
            spec?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpServiceSpecArgs>;
        }

        /**
         * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
         */
        export interface ElasticMapsServerSpecHttpServiceMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ElasticMapsServerSpecHttpServiceSpecArgs {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
             */
            allocateLoadBalancerNodePorts?: pulumi.Input<boolean>;
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: pulumi.Input<string>;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
             *  This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName?: pulumi.Input<string>;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: pulumi.Input<string>;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
             */
            healthCheckNodePort?: pulumi.Input<number>;
            /**
             * InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
             */
            internalTrafficPolicy?: pulumi.Input<string>;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
             *  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             */
            ipFamilies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy?: pulumi.Input<string>;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass?: pulumi.Input<string>;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: pulumi.Input<string>;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: pulumi.Input<pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpServiceSpecPortsArgs>[]>;
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses?: pulumi.Input<boolean>;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: pulumi.Input<string>;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs>;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ElasticMapsServerSpecHttpServiceSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * elasticMapsServerSpecHttpServiceSpecPortsArgsProvideDefaults sets the appropriate defaults for ElasticMapsServerSpecHttpServiceSpecPortsArgs
         */
        export function elasticMapsServerSpecHttpServiceSpecPortsArgsProvideDefaults(val: ElasticMapsServerSpecHttpServiceSpecPortsArgs): ElasticMapsServerSpecHttpServiceSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs>;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIPArgs {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ElasticMapsServerSpecHttpTlsArgs {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpTlsCertificateArgs>;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs>;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ElasticMapsServerSpecHttpTlsCertificateArgs {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: pulumi.Input<boolean>;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.maps.v1alpha1.ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs>[]>;
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: pulumi.Input<string>;
            /**
             * IP is the IP address of the subject.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * MapsStatus defines the observed state of Elastic Maps Server
         */
        export interface ElasticMapsServerStatusArgs {
            /**
             * AssociationStatus is the status of an association resource.
             */
            associationStatus?: pulumi.Input<string>;
            /**
             * AvailableNodes is the number of available replicas in the deployment.
             */
            availableNodes?: pulumi.Input<number>;
            /**
             * Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
             */
            count?: pulumi.Input<number>;
            /**
             * Health of the deployment.
             */
            health?: pulumi.Input<string>;
            /**
             * Selector is the label selector used to find all pods.
             */
            selector?: pulumi.Input<string>;
            /**
             * Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
             */
            version?: pulumi.Input<string>;
        }
    }
}

export namespace postgresoperator {
    export namespace v1beta1 {
        /**
         * PostgresClusterSpec defines the desired state of PostgresCluster
         */
        export interface PostgresClusterSpecArgs {
            /**
             * PostgreSQL backup configuration
             */
            backups: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsArgs>;
            config?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigArgs>;
            /**
             * The secret containing the replication client certificates and keys for secure connections to the PostgreSQL server. It will need to contain the client TLS certificate, TLS key and the Certificate Authority certificate with the data keys set to tls.crt, tls.key and ca.crt, respectively. NOTE: If CustomReplicationClientTLSSecret is provided, CustomTLSSecret MUST be provided and the ca.crt provided must be the same.
             */
            customReplicationTLSSecret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecCustomReplicationTLSSecretArgs>;
            /**
             * The secret containing the Certificates and Keys to encrypt PostgreSQL traffic will need to contain the server TLS certificate, TLS key and the Certificate Authority certificate with the data keys set to tls.crt, tls.key and ca.crt, respectively. It will then be mounted as a volume projection to the '/pgconf/tls' directory. For more information on Kubernetes secret projections, please see https://k8s.io/docs/concepts/configuration/secret/#projection-of-secret-keys-to-specific-paths NOTE: If CustomTLSSecret is provided, CustomReplicationClientTLSSecret MUST be provided and the ca.crt provided must be the same.
             */
            customTLSSecret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecCustomTLSSecretArgs>;
            /**
             * Specifies a data source for bootstrapping the PostgreSQL cluster.
             */
            dataSource?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourceArgs>;
            /**
             * DatabaseInitSQL defines a ConfigMap containing custom SQL that will be run after the cluster is initialized. This ConfigMap must be in the same namespace as the cluster.
             */
            databaseInitSQL?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDatabaseInitSQLArgs>;
            /**
             * Whether or not the PostgreSQL cluster should use the defined default scheduling constraints. If the field is unset or false, the default scheduling constraints will be used in addition to any custom constraints provided.
             */
            disableDefaultPodScheduling?: pulumi.Input<boolean>;
            /**
             * The image name to use for PostgreSQL containers. When omitted, the value comes from an operator environment variable. For standard PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13. For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion}, e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is used to determine when Kubernetes will attempt to pull (download) container images. More info: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * The image pull secrets used to pull from a private registry Changing this value causes all running pods to restart. https://k8s.io/docs/tasks/configure-pod-container/pull-image-private-registry/
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecImagePullSecretsArgs>[]>;
            /**
             * Specifies one or more sets of PostgreSQL pods that replicate data for this cluster.
             */
            instances: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesArgs>[]>;
            /**
             * Metadata contains metadata for PostgresCluster resources
             */
            metadata?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMetadataArgs>;
            /**
             * The specification of monitoring tools that connect to PostgreSQL
             */
            monitoring?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringArgs>;
            /**
             * Whether or not the PostgreSQL cluster is being deployed to an OpenShift environment. If the field is unset, the operator will automatically detect the environment.
             */
            openshift?: pulumi.Input<boolean>;
            patroni?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecPatroniArgs>;
            /**
             * The port on which PostgreSQL should listen.
             */
            port?: pulumi.Input<number>;
            /**
             * The PostGIS extension version installed in the PostgreSQL image. When image is not set, indicates a PostGIS enabled image will be used.
             */
            postGISVersion?: pulumi.Input<string>;
            /**
             * The major version of PostgreSQL installed in the PostgreSQL image
             */
            postgresVersion: pulumi.Input<number>;
            /**
             * The specification of a proxy that connects to PostgreSQL.
             */
            proxy?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyArgs>;
            /**
             * Specification of the service that exposes the PostgreSQL primary instance.
             */
            service?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecServiceArgs>;
            /**
             * Whether or not the PostgreSQL cluster should be stopped. When this is true, workloads are scaled to zero and CronJobs are suspended. Other resources, such as Services and Volumes, remain in place.
             */
            shutdown?: pulumi.Input<boolean>;
            /**
             * Run this cluster as a read-only copy of an existing cluster or archive.
             */
            standby?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecStandbyArgs>;
            /**
             * A list of group IDs applied to the process of a container. These can be useful when accessing shared file systems with constrained permissions. More info: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * The specification of a user interface that connects to PostgreSQL.
             */
            userInterface?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfaceArgs>;
            /**
             * Users to create inside PostgreSQL and the databases they should access. The default creates one user that can access one database matching the PostgresCluster name. An empty list creates no users. Removing a user from this list does NOT drop the user nor revoke their access.
             */
            users?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUsersArgs>[]>;
        }
        /**
         * postgresClusterSpecArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecArgs
         */
        export function postgresClusterSpecArgsProvideDefaults(val: PostgresClusterSpecArgs): PostgresClusterSpecArgs {
            return {
                ...val,
                backups: pulumi.output(val.backups).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecBackupsArgsProvideDefaults),
                dataSource: (val.dataSource ? pulumi.output(val.dataSource).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecDataSourceArgsProvideDefaults) : undefined),
                patroni: (val.patroni ? pulumi.output(val.patroni).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecPatroniArgsProvideDefaults) : undefined),
                port: (val.port) ?? 5432,
                proxy: (val.proxy ? pulumi.output(val.proxy).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecProxyArgsProvideDefaults) : undefined),
                standby: (val.standby ? pulumi.output(val.standby).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecStandbyArgsProvideDefaults) : undefined),
                userInterface: (val.userInterface ? pulumi.output(val.userInterface).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecUserInterfaceArgsProvideDefaults) : undefined),
            };
        }

        /**
         * PostgreSQL backup configuration
         */
        export interface PostgresClusterSpecBackupsArgs {
            /**
             * pgBackRest archive configuration
             */
            pgbackrest: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestArgs>;
        }
        /**
         * postgresClusterSpecBackupsArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecBackupsArgs
         */
        export function postgresClusterSpecBackupsArgsProvideDefaults(val: PostgresClusterSpecBackupsArgs): PostgresClusterSpecBackupsArgs {
            return {
                ...val,
                pgbackrest: pulumi.output(val.pgbackrest).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecBackupsPgbackrestArgsProvideDefaults),
            };
        }

        /**
         * pgBackRest archive configuration
         */
        export interface PostgresClusterSpecBackupsPgbackrestArgs {
            /**
             * Projected volumes containing custom pgBackRest configuration.  These files are mounted under "/etc/pgbackrest/conf.d" alongside any pgBackRest configuration generated by the PostgreSQL Operator: https://pgbackrest.org/configuration.html
             */
            configuration?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationArgs>[]>;
            /**
             * Global pgBackRest configuration settings.  These settings are included in the "global" section of the pgBackRest configuration generated by the PostgreSQL Operator, and then mounted under "/etc/pgbackrest/conf.d": https://pgbackrest.org/configuration.html
             */
            global?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The image name to use for pgBackRest containers.  Utilized to run pgBackRest repository hosts and backups. The image may also be set using the RELATED_IMAGE_PGBACKREST environment variable
             */
            image?: pulumi.Input<string>;
            /**
             * Jobs field allows configuration for all backup jobs
             */
            jobs?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestJobsArgs>;
            /**
             * Defines details for manual pgBackRest backup Jobs
             */
            manual?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestManualArgs>;
            /**
             * Metadata contains metadata for PostgresCluster resources
             */
            metadata?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestMetadataArgs>;
            /**
             * Defines configuration for a pgBackRest dedicated repository host.  This section is only applicable if at least one "volume" (i.e. PVC-based) repository is defined in the "repos" section, therefore enabling a dedicated repository host Deployment.
             */
            repoHost?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostArgs>;
            /**
             * Defines a pgBackRest repository
             */
            repos: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposArgs>[]>;
            /**
             * Defines details for performing an in-place restore using pgBackRest
             */
            restore?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreArgs>;
            /**
             * Configuration for pgBackRest sidecar containers
             */
            sidecars?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestSidecarsArgs>;
        }
        /**
         * postgresClusterSpecBackupsPgbackrestArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecBackupsPgbackrestArgs
         */
        export function postgresClusterSpecBackupsPgbackrestArgsProvideDefaults(val: PostgresClusterSpecBackupsPgbackrestArgs): PostgresClusterSpecBackupsPgbackrestArgs {
            return {
                ...val,
                restore: (val.restore ? pulumi.output(val.restore).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecBackupsPgbackrestRestoreArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * information about the secret data to project
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestConfigurationSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface PostgresClusterSpecBackupsPgbackrestConfigurationServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Jobs field allows configuration for all backup jobs
         */
        export interface PostgresClusterSpecBackupsPgbackrestJobsArgs {
            /**
             * Priority class name for the pgBackRest backup Job pods. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Resource limits for backup jobs. Includes manual, scheduled and replica create backups
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestJobsResourcesArgs>;
        }

        /**
         * Resource limits for backup jobs. Includes manual, scheduled and replica create backups
         */
        export interface PostgresClusterSpecBackupsPgbackrestJobsResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Defines details for manual pgBackRest backup Jobs
         */
        export interface PostgresClusterSpecBackupsPgbackrestManualArgs {
            /**
             * Command line options to include when running the pgBackRest backup command. https://pgbackrest.org/command.html#command-backup
             */
            options?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The name of the pgBackRest repo to run the backup command against.
             */
            repoName: pulumi.Input<string>;
        }

        /**
         * Metadata contains metadata for PostgresCluster resources
         */
        export interface PostgresClusterSpecBackupsPgbackrestMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Defines configuration for a pgBackRest dedicated repository host.  This section is only applicable if at least one "volume" (i.e. PVC-based) repository is defined in the "repos" section, therefore enabling a dedicated repository host Deployment.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostArgs {
            /**
             * Scheduling constraints of the Dedicated repo host pod. Changing this value causes repo host to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
             */
            affinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityArgs>;
            /**
             * Priority class name for the pgBackRest repo host pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Resource requirements for a pgBackRest repository host
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostResourcesArgs>;
            /**
             * ConfigMap containing custom SSH configuration. Deprecated: Repository hosts use mTLS for encryption, authentication, and authorization.
             */
            sshConfigMap?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostSshConfigMapArgs>;
            /**
             * Secret containing custom SSH keys. Deprecated: Repository hosts use mTLS for encryption, authentication, and authorization.
             */
            sshSecret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostSshSecretArgs>;
            /**
             * Tolerations of a PgBackRest repo host pod. Changing this value causes a restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostTolerationsArgs>[]>;
            /**
             * Topology spread constraints of a Dedicated repo host pod. Changing this value causes the repo host to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostTopologySpreadConstraintsArgs>[]>;
        }

        /**
         * Scheduling constraints of the Dedicated repo host pod. Changing this value causes repo host to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Resource requirements for a pgBackRest repository host
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ConfigMap containing custom SSH configuration. Deprecated: Repository hosts use mTLS for encryption, authentication, and authorization.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostSshConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostSshConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostSshConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Secret containing custom SSH keys. Deprecated: Repository hosts use mTLS for encryption, authentication, and authorization.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostSshSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostSshSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostSshSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRepoHostTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRepoHostTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PGBackRestRepo represents a pgBackRest repository.  Only one of its members may be specified.
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposArgs {
            /**
             * Represents a pgBackRest repository that is created using Azure storage
             */
            azure?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposAzureArgs>;
            /**
             * Represents a pgBackRest repository that is created using Google Cloud Storage
             */
            gcs?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposGcsArgs>;
            /**
             * The name of the the repository
             */
            name: pulumi.Input<string>;
            /**
             * RepoS3 represents a pgBackRest repository that is created using AWS S3 (or S3-compatible) storage
             */
            s3?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposS3Args>;
            /**
             * Defines the schedules for the pgBackRest backups Full, Differential and Incremental backup types are supported: https://pgbackrest.org/user-guide.html#concept/backup
             */
            schedules?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposSchedulesArgs>;
            /**
             * Represents a pgBackRest repository that is created using a PersistentVolumeClaim
             */
            volume?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposVolumeArgs>;
        }

        /**
         * Represents a pgBackRest repository that is created using Azure storage
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposAzureArgs {
            /**
             * The Azure container utilized for the repository
             */
            container: pulumi.Input<string>;
        }

        /**
         * Represents a pgBackRest repository that is created using Google Cloud Storage
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposGcsArgs {
            /**
             * The GCS bucket utilized for the repository
             */
            bucket: pulumi.Input<string>;
        }

        /**
         * RepoS3 represents a pgBackRest repository that is created using AWS S3 (or S3-compatible) storage
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposS3Args {
            /**
             * The S3 bucket utilized for the repository
             */
            bucket: pulumi.Input<string>;
            /**
             * A valid endpoint corresponding to the specified region
             */
            endpoint: pulumi.Input<string>;
            /**
             * The region corresponding to the S3 bucket
             */
            region: pulumi.Input<string>;
        }

        /**
         * Defines the schedules for the pgBackRest backups Full, Differential and Incremental backup types are supported: https://pgbackrest.org/user-guide.html#concept/backup
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposSchedulesArgs {
            /**
             * Defines the Cron schedule for a differential pgBackRest backup. Follows the standard Cron schedule syntax: https://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
             */
            differential?: pulumi.Input<string>;
            /**
             * Defines the Cron schedule for a full pgBackRest backup. Follows the standard Cron schedule syntax: https://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
             */
            full?: pulumi.Input<string>;
            /**
             * Defines the Cron schedule for an incremental pgBackRest backup. Follows the standard Cron schedule syntax: https://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
             */
            incremental?: pulumi.Input<string>;
        }

        /**
         * Represents a pgBackRest repository that is created using a PersistentVolumeClaim
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposVolumeArgs {
            /**
             * Defines a PersistentVolumeClaim spec used to create and/or bind a volume
             */
            volumeClaimSpec: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecArgs>;
        }

        /**
         * Defines a PersistentVolumeClaim spec used to create and/or bind a volume
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
             */
            dataSource?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecDataSourceArgs>;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestReposVolumeVolumeClaimSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines details for performing an in-place restore using pgBackRest
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreArgs {
            /**
             * Scheduling constraints of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
             */
            affinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityArgs>;
            /**
             * The name of an existing PostgresCluster to use as the data source for the new PostgresCluster. Defaults to the name of the PostgresCluster being created if not provided.
             */
            clusterName?: pulumi.Input<string>;
            /**
             * The namespace of the cluster specified as the data source using the clusterName field. Defaults to the namespace of the PostgresCluster being created if not provided.
             */
            clusterNamespace?: pulumi.Input<string>;
            /**
             * Whether or not in-place pgBackRest restores are enabled for this PostgresCluster.
             */
            enabled: pulumi.Input<boolean>;
            /**
             * Command line options to include when running the pgBackRest restore command. https://pgbackrest.org/command.html#command-restore
             */
            options?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Priority class name for the pgBackRest restore Job pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * The name of the pgBackRest repo within the source PostgresCluster that contains the backups that should be utilized to perform a pgBackRest restore when initializing the data source for the new PostgresCluster.
             */
            repoName: pulumi.Input<string>;
            /**
             * Resource requirements for the pgBackRest restore Job.
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreResourcesArgs>;
            /**
             * Tolerations of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreTolerationsArgs>[]>;
        }
        /**
         * postgresClusterSpecBackupsPgbackrestRestoreArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecBackupsPgbackrestRestoreArgs
         */
        export function postgresClusterSpecBackupsPgbackrestRestoreArgsProvideDefaults(val: PostgresClusterSpecBackupsPgbackrestRestoreArgs): PostgresClusterSpecBackupsPgbackrestRestoreArgs {
            return {
                ...val,
                enabled: (val.enabled) ?? false,
            };
        }

        /**
         * Scheduling constraints of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Resource requirements for the pgBackRest restore Job.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PostgresClusterSpecBackupsPgbackrestRestoreTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Configuration for pgBackRest sidecar containers
         */
        export interface PostgresClusterSpecBackupsPgbackrestSidecarsArgs {
            /**
             * Defines the configuration for the pgBackRest sidecar container
             */
            pgbackrest?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestArgs>;
            /**
             * Defines the configuration for the pgBackRest config sidecar container
             */
            pgbackrestConfig?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestConfigArgs>;
        }

        /**
         * Defines the configuration for the pgBackRest sidecar container
         */
        export interface PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestArgs {
            /**
             * Resource requirements for a sidecar container
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestResourcesArgs>;
        }

        /**
         * Defines the configuration for the pgBackRest config sidecar container
         */
        export interface PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestConfigArgs {
            /**
             * Resource requirements for a sidecar container
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestConfigResourcesArgs>;
        }

        /**
         * Resource requirements for a sidecar container
         */
        export interface PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestConfigResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Resource requirements for a sidecar container
         */
        export interface PostgresClusterSpecBackupsPgbackrestSidecarsPgbackrestResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface PostgresClusterSpecConfigArgs {
            files?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PostgresClusterSpecConfigFilesArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface PostgresClusterSpecConfigFilesConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecConfigFilesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface PostgresClusterSpecConfigFilesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PostgresClusterSpecConfigFilesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PostgresClusterSpecConfigFilesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PostgresClusterSpecConfigFilesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * information about the secret data to project
         */
        export interface PostgresClusterSpecConfigFilesSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecConfigFilesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecConfigFilesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface PostgresClusterSpecConfigFilesServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * The secret containing the replication client certificates and keys for secure connections to the PostgreSQL server. It will need to contain the client TLS certificate, TLS key and the Certificate Authority certificate with the data keys set to tls.crt, tls.key and ca.crt, respectively. NOTE: If CustomReplicationClientTLSSecret is provided, CustomTLSSecret MUST be provided and the ca.crt provided must be the same.
         */
        export interface PostgresClusterSpecCustomReplicationTLSSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecCustomReplicationTLSSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecCustomReplicationTLSSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * The secret containing the Certificates and Keys to encrypt PostgreSQL traffic will need to contain the server TLS certificate, TLS key and the Certificate Authority certificate with the data keys set to tls.crt, tls.key and ca.crt, respectively. It will then be mounted as a volume projection to the '/pgconf/tls' directory. For more information on Kubernetes secret projections, please see https://k8s.io/docs/concepts/configuration/secret/#projection-of-secret-keys-to-specific-paths NOTE: If CustomTLSSecret is provided, CustomReplicationClientTLSSecret MUST be provided and the ca.crt provided must be the same.
         */
        export interface PostgresClusterSpecCustomTLSSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecCustomTLSSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecCustomTLSSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Specifies a data source for bootstrapping the PostgreSQL cluster.
         */
        export interface PostgresClusterSpecDataSourceArgs {
            /**
             * Defines a pgBackRest cloud-based data source that can be used to pre-populate the the PostgreSQL data directory for a new PostgreSQL cluster using a pgBackRest restore. The PGBackRest field is incompatible with the PostgresCluster field: only one data source can be used for pre-populating a new PostgreSQL cluster
             */
            pgbackrest?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestArgs>;
            /**
             * Defines a pgBackRest data source that can be used to pre-populate the PostgreSQL data directory for a new PostgreSQL cluster using a pgBackRest restore. The PGBackRest field is incompatible with the PostgresCluster field: only one data source can be used for pre-populating a new PostgreSQL cluster
             */
            postgresCluster?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterArgs>;
            /**
             * Defines any existing volumes to reuse for this PostgresCluster.
             */
            volumes?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourceVolumesArgs>;
        }
        /**
         * postgresClusterSpecDataSourceArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecDataSourceArgs
         */
        export function postgresClusterSpecDataSourceArgsProvideDefaults(val: PostgresClusterSpecDataSourceArgs): PostgresClusterSpecDataSourceArgs {
            return {
                ...val,
                pgbackrest: (val.pgbackrest ? pulumi.output(val.pgbackrest).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecDataSourcePgbackrestArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Defines a pgBackRest cloud-based data source that can be used to pre-populate the the PostgreSQL data directory for a new PostgreSQL cluster using a pgBackRest restore. The PGBackRest field is incompatible with the PostgresCluster field: only one data source can be used for pre-populating a new PostgreSQL cluster
         */
        export interface PostgresClusterSpecDataSourcePgbackrestArgs {
            /**
             * Scheduling constraints of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
             */
            affinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityArgs>;
            /**
             * Projected volumes containing custom pgBackRest configuration.  These files are mounted under "/etc/pgbackrest/conf.d" alongside any pgBackRest configuration generated by the PostgreSQL Operator: https://pgbackrest.org/configuration.html
             */
            configuration?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationArgs>[]>;
            /**
             * Global pgBackRest configuration settings.  These settings are included in the "global" section of the pgBackRest configuration generated by the PostgreSQL Operator, and then mounted under "/etc/pgbackrest/conf.d": https://pgbackrest.org/configuration.html
             */
            global?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Command line options to include when running the pgBackRest restore command. https://pgbackrest.org/command.html#command-restore
             */
            options?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Priority class name for the pgBackRest restore Job pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Defines a pgBackRest repository
             */
            repo: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoArgs>;
            /**
             * Resource requirements for the pgBackRest restore Job.
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestResourcesArgs>;
            /**
             * The name of an existing pgBackRest stanza to use as the data source for the new PostgresCluster. Defaults to `db` if not provided.
             */
            stanza: pulumi.Input<string>;
            /**
             * Tolerations of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestTolerationsArgs>[]>;
        }
        /**
         * postgresClusterSpecDataSourcePgbackrestArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecDataSourcePgbackrestArgs
         */
        export function postgresClusterSpecDataSourcePgbackrestArgsProvideDefaults(val: PostgresClusterSpecDataSourcePgbackrestArgs): PostgresClusterSpecDataSourcePgbackrestArgs {
            return {
                ...val,
                stanza: (val.stanza) ?? "db",
            };
        }

        /**
         * Scheduling constraints of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * information about the secret data to project
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestConfigurationSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface PostgresClusterSpecDataSourcePgbackrestConfigurationServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Defines a pgBackRest repository
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoArgs {
            /**
             * Represents a pgBackRest repository that is created using Azure storage
             */
            azure?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoAzureArgs>;
            /**
             * Represents a pgBackRest repository that is created using Google Cloud Storage
             */
            gcs?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoGcsArgs>;
            /**
             * The name of the the repository
             */
            name: pulumi.Input<string>;
            /**
             * RepoS3 represents a pgBackRest repository that is created using AWS S3 (or S3-compatible) storage
             */
            s3?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoS3Args>;
            /**
             * Defines the schedules for the pgBackRest backups Full, Differential and Incremental backup types are supported: https://pgbackrest.org/user-guide.html#concept/backup
             */
            schedules?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoSchedulesArgs>;
            /**
             * Represents a pgBackRest repository that is created using a PersistentVolumeClaim
             */
            volume?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoVolumeArgs>;
        }

        /**
         * Represents a pgBackRest repository that is created using Azure storage
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoAzureArgs {
            /**
             * The Azure container utilized for the repository
             */
            container: pulumi.Input<string>;
        }

        /**
         * Represents a pgBackRest repository that is created using Google Cloud Storage
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoGcsArgs {
            /**
             * The GCS bucket utilized for the repository
             */
            bucket: pulumi.Input<string>;
        }

        /**
         * RepoS3 represents a pgBackRest repository that is created using AWS S3 (or S3-compatible) storage
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoS3Args {
            /**
             * The S3 bucket utilized for the repository
             */
            bucket: pulumi.Input<string>;
            /**
             * A valid endpoint corresponding to the specified region
             */
            endpoint: pulumi.Input<string>;
            /**
             * The region corresponding to the S3 bucket
             */
            region: pulumi.Input<string>;
        }

        /**
         * Defines the schedules for the pgBackRest backups Full, Differential and Incremental backup types are supported: https://pgbackrest.org/user-guide.html#concept/backup
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoSchedulesArgs {
            /**
             * Defines the Cron schedule for a differential pgBackRest backup. Follows the standard Cron schedule syntax: https://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
             */
            differential?: pulumi.Input<string>;
            /**
             * Defines the Cron schedule for a full pgBackRest backup. Follows the standard Cron schedule syntax: https://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
             */
            full?: pulumi.Input<string>;
            /**
             * Defines the Cron schedule for an incremental pgBackRest backup. Follows the standard Cron schedule syntax: https://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
             */
            incremental?: pulumi.Input<string>;
        }

        /**
         * Represents a pgBackRest repository that is created using a PersistentVolumeClaim
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoVolumeArgs {
            /**
             * Defines a PersistentVolumeClaim spec used to create and/or bind a volume
             */
            volumeClaimSpec: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecArgs>;
        }

        /**
         * Defines a PersistentVolumeClaim spec used to create and/or bind a volume
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
             */
            dataSource?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecDataSourceArgs>;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestRepoVolumeVolumeClaimSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Resource requirements for the pgBackRest restore Job.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PostgresClusterSpecDataSourcePgbackrestTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Defines a pgBackRest data source that can be used to pre-populate the PostgreSQL data directory for a new PostgreSQL cluster using a pgBackRest restore. The PGBackRest field is incompatible with the PostgresCluster field: only one data source can be used for pre-populating a new PostgreSQL cluster
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterArgs {
            /**
             * Scheduling constraints of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
             */
            affinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityArgs>;
            /**
             * The name of an existing PostgresCluster to use as the data source for the new PostgresCluster. Defaults to the name of the PostgresCluster being created if not provided.
             */
            clusterName?: pulumi.Input<string>;
            /**
             * The namespace of the cluster specified as the data source using the clusterName field. Defaults to the namespace of the PostgresCluster being created if not provided.
             */
            clusterNamespace?: pulumi.Input<string>;
            /**
             * Command line options to include when running the pgBackRest restore command. https://pgbackrest.org/command.html#command-restore
             */
            options?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Priority class name for the pgBackRest restore Job pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * The name of the pgBackRest repo within the source PostgresCluster that contains the backups that should be utilized to perform a pgBackRest restore when initializing the data source for the new PostgresCluster.
             */
            repoName: pulumi.Input<string>;
            /**
             * Resource requirements for the pgBackRest restore Job.
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterResourcesArgs>;
            /**
             * Tolerations of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterTolerationsArgs>[]>;
        }

        /**
         * Scheduling constraints of the pgBackRest restore Job. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Resource requirements for the pgBackRest restore Job.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PostgresClusterSpecDataSourcePostgresClusterTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Defines any existing volumes to reuse for this PostgresCluster.
         */
        export interface PostgresClusterSpecDataSourceVolumesArgs {
            /**
             * Defines the existing pgBackRest repo volume and directory to use in the current PostgresCluster.
             */
            pgBackRestVolume?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourceVolumesPgBackRestVolumeArgs>;
            /**
             * Defines the existing pgData volume and directory to use in the current PostgresCluster.
             */
            pgDataVolume?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourceVolumesPgDataVolumeArgs>;
            /**
             * Defines the existing pg_wal volume and directory to use in the current PostgresCluster. Note that a defined pg_wal volume MUST be accompanied by a pgData volume.
             */
            pgWALVolume?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecDataSourceVolumesPgWALVolumeArgs>;
        }

        /**
         * Defines the existing pgBackRest repo volume and directory to use in the current PostgresCluster.
         */
        export interface PostgresClusterSpecDataSourceVolumesPgBackRestVolumeArgs {
            /**
             * The existing directory. When not set, a move Job is not created for the associated volume.
             */
            directory?: pulumi.Input<string>;
            /**
             * The existing PVC name.
             */
            pvcName: pulumi.Input<string>;
        }

        /**
         * Defines the existing pgData volume and directory to use in the current PostgresCluster.
         */
        export interface PostgresClusterSpecDataSourceVolumesPgDataVolumeArgs {
            /**
             * The existing directory. When not set, a move Job is not created for the associated volume.
             */
            directory?: pulumi.Input<string>;
            /**
             * The existing PVC name.
             */
            pvcName: pulumi.Input<string>;
        }

        /**
         * Defines the existing pg_wal volume and directory to use in the current PostgresCluster. Note that a defined pg_wal volume MUST be accompanied by a pgData volume.
         */
        export interface PostgresClusterSpecDataSourceVolumesPgWALVolumeArgs {
            /**
             * The existing directory. When not set, a move Job is not created for the associated volume.
             */
            directory?: pulumi.Input<string>;
            /**
             * The existing PVC name.
             */
            pvcName: pulumi.Input<string>;
        }

        /**
         * DatabaseInitSQL defines a ConfigMap containing custom SQL that will be run after the cluster is initialized. This ConfigMap must be in the same namespace as the cluster.
         */
        export interface PostgresClusterSpecDatabaseInitSQLArgs {
            /**
             * Key is the ConfigMap data key that points to a SQL string
             */
            key: pulumi.Input<string>;
            /**
             * Name is the name of a ConfigMap
             */
            name: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface PostgresClusterSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
        }

        export interface PostgresClusterSpecInstancesArgs {
            /**
             * Scheduling constraints of a PostgreSQL pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
             */
            affinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityArgs>;
            /**
             * Defines a PersistentVolumeClaim for PostgreSQL data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
             */
            dataVolumeClaimSpec: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesDataVolumeClaimSpecArgs>;
            /**
             * Metadata contains metadata for PostgresCluster resources
             */
            metadata?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesMetadataArgs>;
            /**
             * Minimum number of pods that should be available at a time. Defaults to one when the replicas field is greater than one.
             */
            minAvailable?: pulumi.Input<number | string>;
            /**
             * Name that associates this set of PostgreSQL pods. This field is optional when only one instance set is defined. Each instance set in a cluster must have a unique name. The combined length of this and the cluster name must be 46 characters or less.
             */
            name?: pulumi.Input<string>;
            /**
             * Priority class name for the PostgreSQL pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Number of desired PostgreSQL pods.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Compute resources of a PostgreSQL container.
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesResourcesArgs>;
            /**
             * Configuration for instance sidecar containers
             */
            sidecars?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesSidecarsArgs>;
            /**
             * Tolerations of a PostgreSQL pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesTolerationsArgs>[]>;
            /**
             * Topology spread constraints of a PostgreSQL pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesTopologySpreadConstraintsArgs>[]>;
            /**
             * Defines a separate PersistentVolumeClaim for PostgreSQL's write-ahead log. More info: https://www.postgresql.org/docs/current/wal.html
             */
            walVolumeClaimSpec?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesWalVolumeClaimSpecArgs>;
        }
        /**
         * postgresClusterSpecInstancesArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecInstancesArgs
         */
        export function postgresClusterSpecInstancesArgsProvideDefaults(val: PostgresClusterSpecInstancesArgs): PostgresClusterSpecInstancesArgs {
            return {
                ...val,
                name: (val.name) ?? "",
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Scheduling constraints of a PostgreSQL pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
         */
        export interface PostgresClusterSpecInstancesAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a PersistentVolumeClaim for PostgreSQL data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
         */
        export interface PostgresClusterSpecInstancesDataVolumeClaimSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
             */
            dataSource?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesDataVolumeClaimSpecDataSourceArgs>;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesDataVolumeClaimSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesDataVolumeClaimSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         */
        export interface PostgresClusterSpecInstancesDataVolumeClaimSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PostgresClusterSpecInstancesDataVolumeClaimSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PostgresClusterSpecInstancesDataVolumeClaimSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesDataVolumeClaimSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesDataVolumeClaimSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Metadata contains metadata for PostgresCluster resources
         */
        export interface PostgresClusterSpecInstancesMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Compute resources of a PostgreSQL container.
         */
        export interface PostgresClusterSpecInstancesResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Configuration for instance sidecar containers
         */
        export interface PostgresClusterSpecInstancesSidecarsArgs {
            /**
             * Defines the configuration for the replica cert copy sidecar container
             */
            replicaCertCopy?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesSidecarsReplicaCertCopyArgs>;
        }

        /**
         * Defines the configuration for the replica cert copy sidecar container
         */
        export interface PostgresClusterSpecInstancesSidecarsReplicaCertCopyArgs {
            /**
             * Resource requirements for a sidecar container
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesSidecarsReplicaCertCopyResourcesArgs>;
        }

        /**
         * Resource requirements for a sidecar container
         */
        export interface PostgresClusterSpecInstancesSidecarsReplicaCertCopyResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PostgresClusterSpecInstancesTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PostgresClusterSpecInstancesTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface PostgresClusterSpecInstancesTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a separate PersistentVolumeClaim for PostgreSQL's write-ahead log. More info: https://www.postgresql.org/docs/current/wal.html
         */
        export interface PostgresClusterSpecInstancesWalVolumeClaimSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
             */
            dataSource?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesWalVolumeClaimSpecDataSourceArgs>;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesWalVolumeClaimSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesWalVolumeClaimSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         */
        export interface PostgresClusterSpecInstancesWalVolumeClaimSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PostgresClusterSpecInstancesWalVolumeClaimSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PostgresClusterSpecInstancesWalVolumeClaimSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecInstancesWalVolumeClaimSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecInstancesWalVolumeClaimSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Metadata contains metadata for PostgresCluster resources
         */
        export interface PostgresClusterSpecMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * The specification of monitoring tools that connect to PostgreSQL
         */
        export interface PostgresClusterSpecMonitoringArgs {
            /**
             * PGMonitorSpec defines the desired state of the pgMonitor tool suite
             */
            pgmonitor?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorArgs>;
        }

        /**
         * PGMonitorSpec defines the desired state of the pgMonitor tool suite
         */
        export interface PostgresClusterSpecMonitoringPgmonitorArgs {
            exporter?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterArgs>;
        }

        export interface PostgresClusterSpecMonitoringPgmonitorExporterArgs {
            /**
             * Projected volumes containing custom PostgreSQL Exporter configuration.  Currently supports the customization of PostgreSQL Exporter queries. If a "queries.yaml" file is detected in any volume projected using this field, it will be loaded using the "extend.query-path" flag: https://github.com/prometheus-community/postgres_exporter#flags Changing the values of field causes PostgreSQL and the exporter to restart.
             */
            configuration?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationArgs>[]>;
            /**
             * The image name to use for crunchy-postgres-exporter containers. The image may also be set using the RELATED_IMAGE_PGEXPORTER environment variable.
             */
            image?: pulumi.Input<string>;
            /**
             * Changing this value causes PostgreSQL and the exporter to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterResourcesArgs>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * information about the secret data to project
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecMonitoringPgmonitorExporterConfigurationSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterConfigurationServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Changing this value causes PostgreSQL and the exporter to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
         */
        export interface PostgresClusterSpecMonitoringPgmonitorExporterResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface PostgresClusterSpecPatroniArgs {
            /**
             * Patroni dynamic configuration settings. Changes to this value will be automatically reloaded without validation. Changes to certain PostgreSQL parameters cause PostgreSQL to restart. More info: https://patroni.readthedocs.io/en/latest/SETTINGS.html
             */
            dynamicConfiguration?: pulumi.Input<{[key: string]: any}>;
            /**
             * TTL of the cluster leader lock. "Think of it as the length of time before initiation of the automatic failover process." Changing this value causes PostgreSQL to restart.
             */
            leaderLeaseDurationSeconds?: pulumi.Input<number>;
            /**
             * The port on which Patroni should listen. Changing this value causes PostgreSQL to restart.
             */
            port?: pulumi.Input<number>;
            /**
             * Switchover gives options to perform ad hoc switchovers in a PostgresCluster.
             */
            switchover?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecPatroniSwitchoverArgs>;
            /**
             * The interval for refreshing the leader lock and applying dynamicConfiguration. Must be less than leaderLeaseDurationSeconds. Changing this value causes PostgreSQL to restart.
             */
            syncPeriodSeconds?: pulumi.Input<number>;
        }
        /**
         * postgresClusterSpecPatroniArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecPatroniArgs
         */
        export function postgresClusterSpecPatroniArgsProvideDefaults(val: PostgresClusterSpecPatroniArgs): PostgresClusterSpecPatroniArgs {
            return {
                ...val,
                leaderLeaseDurationSeconds: (val.leaderLeaseDurationSeconds) ?? 30,
                port: (val.port) ?? 8008,
                switchover: (val.switchover ? pulumi.output(val.switchover).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecPatroniSwitchoverArgsProvideDefaults) : undefined),
                syncPeriodSeconds: (val.syncPeriodSeconds) ?? 10,
            };
        }

        /**
         * Switchover gives options to perform ad hoc switchovers in a PostgresCluster.
         */
        export interface PostgresClusterSpecPatroniSwitchoverArgs {
            /**
             * Whether or not the operator should allow switchovers in a PostgresCluster
             */
            enabled: pulumi.Input<boolean>;
            /**
             * The instance that should become primary during a switchover. This field is optional when Type is "Switchover" and required when Type is "Failover". When it is not specified, a healthy replica is automatically selected.
             */
            targetInstance?: pulumi.Input<string>;
            /**
             * Type of switchover to perform. Valid options are Switchover and Failover. "Switchover" changes the primary instance of a healthy PostgresCluster. "Failover" forces a particular instance to be primary, regardless of other factors. A TargetInstance must be specified to failover. NOTE: The Failover type is reserved as the "last resort" case.
             */
            type?: pulumi.Input<string>;
        }
        /**
         * postgresClusterSpecPatroniSwitchoverArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecPatroniSwitchoverArgs
         */
        export function postgresClusterSpecPatroniSwitchoverArgsProvideDefaults(val: PostgresClusterSpecPatroniSwitchoverArgs): PostgresClusterSpecPatroniSwitchoverArgs {
            return {
                ...val,
                type: (val.type) ?? "Switchover",
            };
        }

        /**
         * The specification of a proxy that connects to PostgreSQL.
         */
        export interface PostgresClusterSpecProxyArgs {
            /**
             * Defines a PgBouncer proxy and connection pooler.
             */
            pgBouncer: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerArgs>;
        }
        /**
         * postgresClusterSpecProxyArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecProxyArgs
         */
        export function postgresClusterSpecProxyArgsProvideDefaults(val: PostgresClusterSpecProxyArgs): PostgresClusterSpecProxyArgs {
            return {
                ...val,
                pgBouncer: pulumi.output(val.pgBouncer).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecProxyPgBouncerArgsProvideDefaults),
            };
        }

        /**
         * Defines a PgBouncer proxy and connection pooler.
         */
        export interface PostgresClusterSpecProxyPgBouncerArgs {
            /**
             * Scheduling constraints of a PgBouncer pod. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
             */
            affinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityArgs>;
            /**
             * Configuration settings for the PgBouncer process. Changes to any of these values will be automatically reloaded without validation. Be careful, as you may put PgBouncer into an unusable state. More info: https://www.pgbouncer.org/usage.html#reload
             */
            config?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigArgs>;
            /**
             * A secret projection containing a certificate and key with which to encrypt connections to PgBouncer. The "tls.crt", "tls.key", and "ca.crt" paths must be PEM-encoded certificates and keys. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/configuration/secret/#projection-of-secret-keys-to-specific-paths
             */
            customTLSSecret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerCustomTLSSecretArgs>;
            /**
             * Name of a container image that can run PgBouncer 1.15 or newer. Changing this value causes PgBouncer to restart. The image may also be set using the RELATED_IMAGE_PGBOUNCER environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Metadata contains metadata for PostgresCluster resources
             */
            metadata?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerMetadataArgs>;
            /**
             * Minimum number of pods that should be available at a time. Defaults to one when the replicas field is greater than one.
             */
            minAvailable?: pulumi.Input<number | string>;
            /**
             * Port on which PgBouncer should listen for client connections. Changing this value causes PgBouncer to restart.
             */
            port?: pulumi.Input<number>;
            /**
             * Priority class name for the pgBouncer pod. Changing this value causes PostgreSQL to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Number of desired PgBouncer pods.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Compute resources of a PgBouncer container. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerResourcesArgs>;
            /**
             * Specification of the service that exposes PgBouncer.
             */
            service?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerServiceArgs>;
            /**
             * Configuration for pgBouncer sidecar containers
             */
            sidecars?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerSidecarsArgs>;
            /**
             * Tolerations of a PgBouncer pod. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerTolerationsArgs>[]>;
            /**
             * Topology spread constraints of a PgBouncer pod. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsArgs>[]>;
        }
        /**
         * postgresClusterSpecProxyPgBouncerArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecProxyPgBouncerArgs
         */
        export function postgresClusterSpecProxyPgBouncerArgsProvideDefaults(val: PostgresClusterSpecProxyPgBouncerArgs): PostgresClusterSpecProxyPgBouncerArgs {
            return {
                ...val,
                port: (val.port) ?? 5432,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Scheduling constraints of a PgBouncer pod. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Configuration settings for the PgBouncer process. Changes to any of these values will be automatically reloaded without validation. Be careful, as you may put PgBouncer into an unusable state. More info: https://www.pgbouncer.org/usage.html#reload
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigArgs {
            /**
             * PgBouncer database definitions. The key is the database requested by a client while the value is a libpq-styled connection string. The special key "*" acts as a fallback. When this field is empty, PgBouncer is configured with a single "*" entry that connects to the primary PostgreSQL instance. More info: https://www.pgbouncer.org/config.html#section-databases
             */
            databases?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Files to mount under "/etc/pgbouncer". When specified, settings in the "pgbouncer.ini" file are loaded before all others. From there, other files may be included by absolute path. Changing these references causes PgBouncer to restart, but changes to the file contents are automatically reloaded. More info: https://www.pgbouncer.org/config.html#include-directive
             */
            files?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesArgs>[]>;
            /**
             * Settings that apply to the entire PgBouncer process. More info: https://www.pgbouncer.org/config.html
             */
            global?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Connection settings specific to particular users. More info: https://www.pgbouncer.org/config.html#section-users
             */
            users?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * information about the secret data to project
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerConfigFilesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface PostgresClusterSpecProxyPgBouncerConfigFilesServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * A secret projection containing a certificate and key with which to encrypt connections to PgBouncer. The "tls.crt", "tls.key", and "ca.crt" paths must be PEM-encoded certificates and keys. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/configuration/secret/#projection-of-secret-keys-to-specific-paths
         */
        export interface PostgresClusterSpecProxyPgBouncerCustomTLSSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerCustomTLSSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecProxyPgBouncerCustomTLSSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Metadata contains metadata for PostgresCluster resources
         */
        export interface PostgresClusterSpecProxyPgBouncerMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Compute resources of a PgBouncer container. Changing this value causes PgBouncer to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
         */
        export interface PostgresClusterSpecProxyPgBouncerResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Specification of the service that exposes PgBouncer.
         */
        export interface PostgresClusterSpecProxyPgBouncerServiceArgs {
            /**
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type: pulumi.Input<string>;
        }

        /**
         * Configuration for pgBouncer sidecar containers
         */
        export interface PostgresClusterSpecProxyPgBouncerSidecarsArgs {
            /**
             * Defines the configuration for the pgBouncer config sidecar container
             */
            pgbouncerConfig?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerSidecarsPgbouncerConfigArgs>;
        }

        /**
         * Defines the configuration for the pgBouncer config sidecar container
         */
        export interface PostgresClusterSpecProxyPgBouncerSidecarsPgbouncerConfigArgs {
            /**
             * Resource requirements for a sidecar container
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerSidecarsPgbouncerConfigResourcesArgs>;
        }

        /**
         * Resource requirements for a sidecar container
         */
        export interface PostgresClusterSpecProxyPgBouncerSidecarsPgbouncerConfigResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PostgresClusterSpecProxyPgBouncerTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecProxyPgBouncerTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Specification of the service that exposes the PostgreSQL primary instance.
         */
        export interface PostgresClusterSpecServiceArgs {
            /**
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type: pulumi.Input<string>;
        }

        /**
         * Run this cluster as a read-only copy of an existing cluster or archive.
         */
        export interface PostgresClusterSpecStandbyArgs {
            /**
             * Whether or not the PostgreSQL cluster should be read-only. When this is true, WAL files are applied from the pgBackRest repository.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * The name of the pgBackRest repository to follow for WAL files.
             */
            repoName: pulumi.Input<string>;
        }
        /**
         * postgresClusterSpecStandbyArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecStandbyArgs
         */
        export function postgresClusterSpecStandbyArgsProvideDefaults(val: PostgresClusterSpecStandbyArgs): PostgresClusterSpecStandbyArgs {
            return {
                ...val,
                enabled: (val.enabled) ?? true,
            };
        }

        /**
         * The specification of a user interface that connects to PostgreSQL.
         */
        export interface PostgresClusterSpecUserInterfaceArgs {
            /**
             * Defines a pgAdmin user interface.
             */
            pgAdmin: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminArgs>;
        }
        /**
         * postgresClusterSpecUserInterfaceArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecUserInterfaceArgs
         */
        export function postgresClusterSpecUserInterfaceArgsProvideDefaults(val: PostgresClusterSpecUserInterfaceArgs): PostgresClusterSpecUserInterfaceArgs {
            return {
                ...val,
                pgAdmin: pulumi.output(val.pgAdmin).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecUserInterfacePgAdminArgsProvideDefaults),
            };
        }

        /**
         * Defines a pgAdmin user interface.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminArgs {
            /**
             * Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
             */
            affinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityArgs>;
            /**
             * Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
             */
            config?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigArgs>;
            /**
             * Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
             */
            dataVolumeClaimSpec: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs>;
            /**
             * Name of a container image that can run pgAdmin 4. Changing this value causes pgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN environment variable. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Metadata contains metadata for PostgresCluster resources
             */
            metadata?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminMetadataArgs>;
            /**
             * Priority class name for the pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Number of desired pgAdmin pods.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminResourcesArgs>;
            /**
             * Specification of the service that exposes pgAdmin.
             */
            service?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminServiceArgs>;
            /**
             * Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminTolerationsArgs>[]>;
            /**
             * Topology spread constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs>[]>;
        }
        /**
         * postgresClusterSpecUserInterfacePgAdminArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecUserInterfacePgAdminArgs
         */
        export function postgresClusterSpecUserInterfacePgAdminArgsProvideDefaults(val: PostgresClusterSpecUserInterfacePgAdminArgs): PostgresClusterSpecUserInterfacePgAdminArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Scheduling constraints of a pgAdmin pod. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Configuration settings for the pgAdmin process. Changes to any of these values will be loaded without validation. Be careful, as you may put pgAdmin into an unusable state.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigArgs {
            /**
             * Files allows the user to mount projected volumes into the pgAdmin container so that files can be referenced by pgAdmin as needed.
             */
            files?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs>[]>;
            /**
             * A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
             */
            ldapBindPassword?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs>;
            /**
             * Settings for the pgAdmin server process. Keys should be uppercase and values must be constants. More info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html
             */
            settings?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesArgs {
            /**
             * information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs>;
            /**
             * information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs>;
            /**
             * information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs>;
            /**
             * information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs>;
        }

        /**
         * information about the configMap data to project
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesConfigMapItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the downwardAPI data to project
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * information about the secret data to project
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretArgs {
            /**
             * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesSecretItemsArgs {
            /**
             * The key to project.
             */
            key: pulumi.Input<string>;
            /**
             * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * information about the serviceAccountToken data to project
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigFilesServiceAccountTokenArgs {
            /**
             * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * Path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * A Secret containing the value for the LDAP_BIND_PASSWORD setting. More info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html
         */
        export interface PostgresClusterSpecUserInterfacePgAdminConfigLdapBindPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Defines a PersistentVolumeClaim for pgAdmin data. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
         */
        export interface PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecArgs {
            /**
             * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
             */
            dataSource?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs>;
            /**
             * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs>;
            /**
             * A label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs>;
            /**
             * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * VolumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * A label query over volumes to consider for binding.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminDataVolumeClaimSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Metadata contains metadata for PostgresCluster resources
         */
        export interface PostgresClusterSpecUserInterfacePgAdminMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Compute resources of a pgAdmin container. Changing this value causes pgAdmin to restart. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
         */
        export interface PostgresClusterSpecUserInterfacePgAdminResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * Specification of the service that exposes pgAdmin.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminServiceArgs {
            /**
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PostgresClusterSpecUserInterfacePgAdminTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface PostgresClusterSpecUsersArgs {
            /**
             * Databases to which this user can connect and create objects. Removing a database from this list does NOT revoke access. This field is ignored for the "postgres" user.
             */
            databases?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The name of this PostgreSQL user. The value may contain only lowercase letters, numbers, and hyphen so that it fits into Kubernetes metadata.
             */
            name: pulumi.Input<string>;
            /**
             * ALTER ROLE options except for PASSWORD. This field is ignored for the "postgres" user. More info: https://www.postgresql.org/docs/current/role-attributes.html
             */
            options?: pulumi.Input<string>;
            /**
             * Properties of the password generated for this user.
             */
            password?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterSpecUsersPasswordArgs>;
        }
        /**
         * postgresClusterSpecUsersArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecUsersArgs
         */
        export function postgresClusterSpecUsersArgsProvideDefaults(val: PostgresClusterSpecUsersArgs): PostgresClusterSpecUsersArgs {
            return {
                ...val,
                password: (val.password ? pulumi.output(val.password).apply(inputs.postgresoperator.v1beta1.postgresClusterSpecUsersPasswordArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Properties of the password generated for this user.
         */
        export interface PostgresClusterSpecUsersPasswordArgs {
            /**
             * Type of password to generate. Defaults to ASCII. Valid options are ASCII and AlphaNumeric. "ASCII" passwords contain letters, numbers, and symbols from the US-ASCII character set. "AlphaNumeric" passwords contain letters and numbers from the US-ASCII character set.
             */
            type: pulumi.Input<string>;
        }
        /**
         * postgresClusterSpecUsersPasswordArgsProvideDefaults sets the appropriate defaults for PostgresClusterSpecUsersPasswordArgs
         */
        export function postgresClusterSpecUsersPasswordArgsProvideDefaults(val: PostgresClusterSpecUsersPasswordArgs): PostgresClusterSpecUsersPasswordArgs {
            return {
                ...val,
                type: (val.type) ?? "ASCII",
            };
        }

        /**
         * PostgresClusterStatus defines the observed state of PostgresCluster
         */
        export interface PostgresClusterStatusArgs {
            /**
             * conditions represent the observations of postgrescluster's current state. Known .status.conditions.type are: "PersistentVolumeResizing", "ProxyAvailable"
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusConditionsArgs>[]>;
            /**
             * DatabaseInitSQL state of custom database initialization in the cluster
             */
            databaseInitSQL?: pulumi.Input<string>;
            /**
             * Identifies the databases that have been installed into PostgreSQL.
             */
            databaseRevision?: pulumi.Input<string>;
            /**
             * Current state of PostgreSQL instances.
             */
            instances?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusInstancesArgs>[]>;
            /**
             * Current state of PostgreSQL cluster monitoring tool configuration
             */
            monitoring?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusMonitoringArgs>;
            /**
             * observedGeneration represents the .metadata.generation on which the status was based.
             */
            observedGeneration?: pulumi.Input<number>;
            patroni?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusPatroniArgs>;
            /**
             * Status information for pgBackRest
             */
            pgbackrest?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusPgbackrestArgs>;
            /**
             * Stores the current PostgreSQL major version following a successful major PostgreSQL upgrade.
             */
            postgresVersion?: pulumi.Input<number>;
            /**
             * Current state of the PostgreSQL proxy.
             */
            proxy?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusProxyArgs>;
            /**
             * The instance that should be started first when bootstrapping and/or starting a PostgresCluster.
             */
            startupInstance?: pulumi.Input<string>;
            /**
             * The instance set associated with the startupInstance
             */
            startupInstanceSet?: pulumi.Input<string>;
            /**
             * Current state of the PostgreSQL user interface.
             */
            userInterface?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusUserInterfaceArgs>;
            /**
             * Identifies the users that have been installed into PostgreSQL.
             */
            usersRevision?: pulumi.Input<string>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface PostgresClusterStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase.
             */
            type: pulumi.Input<string>;
        }

        export interface PostgresClusterStatusInstancesArgs {
            name: pulumi.Input<string>;
            /**
             * Total number of ready pods.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Total number of pods.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Total number of pods that have the desired specification.
             */
            updatedReplicas?: pulumi.Input<number>;
        }

        /**
         * Current state of PostgreSQL cluster monitoring tool configuration
         */
        export interface PostgresClusterStatusMonitoringArgs {
            exporterConfiguration?: pulumi.Input<string>;
        }

        export interface PostgresClusterStatusPatroniArgs {
            /**
             * Tracks the execution of the switchover requests.
             */
            switchover?: pulumi.Input<string>;
            /**
             * The PostgreSQL system identifier reported by Patroni.
             */
            systemIdentifier?: pulumi.Input<string>;
        }

        /**
         * Status information for pgBackRest
         */
        export interface PostgresClusterStatusPgbackrestArgs {
            /**
             * Status information for manual backups
             */
            manualBackup?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusPgbackrestManualBackupArgs>;
            /**
             * Status information for the pgBackRest dedicated repository host
             */
            repoHost?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusPgbackrestRepoHostArgs>;
            /**
             * Status information for pgBackRest repositories
             */
            repos?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusPgbackrestReposArgs>[]>;
            /**
             * Status information for in-place restores
             */
            restore?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusPgbackrestRestoreArgs>;
            /**
             * Status information for scheduled backups
             */
            scheduledBackups?: pulumi.Input<pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusPgbackrestScheduledBackupsArgs>[]>;
        }

        /**
         * Status information for manual backups
         */
        export interface PostgresClusterStatusPgbackrestManualBackupArgs {
            /**
             * The number of actively running manual backup Pods.
             */
            active?: pulumi.Input<number>;
            /**
             * Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
             */
            completionTime?: pulumi.Input<string>;
            /**
             * The number of Pods for the manual backup Job that reached the "Failed" phase.
             */
            failed?: pulumi.Input<number>;
            /**
             * Specifies whether or not the Job is finished executing (does not indicate success or failure).
             */
            finished: pulumi.Input<boolean>;
            /**
             * A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
             */
            id: pulumi.Input<string>;
            /**
             * Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
             */
            startTime?: pulumi.Input<string>;
            /**
             * The number of Pods for the manual backup Job that reached the "Succeeded" phase.
             */
            succeeded?: pulumi.Input<number>;
        }

        /**
         * Status information for the pgBackRest dedicated repository host
         */
        export interface PostgresClusterStatusPgbackrestRepoHostArgs {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Whether or not the pgBackRest repository host is ready for use
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * RepoStatus the status of a pgBackRest repository
         */
        export interface PostgresClusterStatusPgbackrestReposArgs {
            /**
             * Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume
             */
            bound?: pulumi.Input<boolean>;
            /**
             * The name of the pgBackRest repository
             */
            name: pulumi.Input<string>;
            /**
             * ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed to bootstrap replicas.
             */
            replicaCreateBackupComplete?: pulumi.Input<boolean>;
            /**
             * A hash of the required fields in the spec for defining an Azure, GCS or S3 repository, Utilizd to detect changes to these fields and then execute pgBackRest stanza-create commands accordingly.
             */
            repoOptionsHash?: pulumi.Input<string>;
            /**
             * Specifies whether or not a stanza has been successfully created for the repository
             */
            stanzaCreated?: pulumi.Input<boolean>;
            /**
             * The name of the volume the containing the pgBackRest repository
             */
            volume?: pulumi.Input<string>;
        }

        /**
         * Status information for in-place restores
         */
        export interface PostgresClusterStatusPgbackrestRestoreArgs {
            /**
             * The number of actively running manual backup Pods.
             */
            active?: pulumi.Input<number>;
            /**
             * Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
             */
            completionTime?: pulumi.Input<string>;
            /**
             * The number of Pods for the manual backup Job that reached the "Failed" phase.
             */
            failed?: pulumi.Input<number>;
            /**
             * Specifies whether or not the Job is finished executing (does not indicate success or failure).
             */
            finished: pulumi.Input<boolean>;
            /**
             * A unique identifier for the manual backup as provided using the "pgbackrest-backup" annotation when initiating a backup.
             */
            id: pulumi.Input<string>;
            /**
             * Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
             */
            startTime?: pulumi.Input<string>;
            /**
             * The number of Pods for the manual backup Job that reached the "Succeeded" phase.
             */
            succeeded?: pulumi.Input<number>;
        }

        export interface PostgresClusterStatusPgbackrestScheduledBackupsArgs {
            /**
             * The number of actively running manual backup Pods.
             */
            active?: pulumi.Input<number>;
            /**
             * Represents the time the manual backup Job was determined by the Job controller to be completed.  This field is only set if the backup completed successfully. Additionally, it is represented in RFC3339 form and is in UTC.
             */
            completionTime?: pulumi.Input<string>;
            /**
             * The name of the associated pgBackRest scheduled backup CronJob
             */
            cronJobName?: pulumi.Input<string>;
            /**
             * The number of Pods for the manual backup Job that reached the "Failed" phase.
             */
            failed?: pulumi.Input<number>;
            /**
             * The name of the associated pgBackRest repository
             */
            repo?: pulumi.Input<string>;
            /**
             * Represents the time the manual backup Job was acknowledged by the Job controller. It is represented in RFC3339 form and is in UTC.
             */
            startTime?: pulumi.Input<string>;
            /**
             * The number of Pods for the manual backup Job that reached the "Succeeded" phase.
             */
            succeeded?: pulumi.Input<number>;
            /**
             * The pgBackRest backup type for this Job
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Current state of the PostgreSQL proxy.
         */
        export interface PostgresClusterStatusProxyArgs {
            pgBouncer?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusProxyPgBouncerArgs>;
        }

        export interface PostgresClusterStatusProxyPgBouncerArgs {
            /**
             * Identifies the revision of PgBouncer assets that have been installed into PostgreSQL.
             */
            postgresRevision?: pulumi.Input<string>;
            /**
             * Total number of ready pods.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated pods.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * Current state of the PostgreSQL user interface.
         */
        export interface PostgresClusterStatusUserInterfaceArgs {
            /**
             * The state of the pgAdmin user interface.
             */
            pgAdmin?: pulumi.Input<inputs.postgresoperator.v1beta1.PostgresClusterStatusUserInterfacePgAdminArgs>;
        }

        /**
         * The state of the pgAdmin user interface.
         */
        export interface PostgresClusterStatusUserInterfacePgAdminArgs {
            /**
             * Hash that indicates which users have been installed into pgAdmin.
             */
            usersRevision?: pulumi.Input<string>;
        }
    }
}
